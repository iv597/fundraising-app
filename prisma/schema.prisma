// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrganizationType {
  UNIVERSITY
  HIGH_SCHOOL
}

model Organization {
  id            String             @id @default(cuid())
  name          String
  legalName     String             @unique
  type          OrganizationType   @default(UNIVERSITY)
  taxNumber     String             @unique
  maxMembers    Int?

  programs      Program[]
  members       Member[]
}

model Program {
  id                 Int                @id @default(autoincrement())
  organizationId     String
  name               String
  image              String
  shortDescription   String  
  description        String             @db.Text
  slug               String
  recommendedAmounts Json?

  organization       Organization      @relation(fields: [organizationId], references: [id])
  donations          Donation[]
  subscriptions      Subscription[]
}

model Member {
  id                 String             @id
  roleId             Int
  image              String
  organizationId     String
  isBlocked          Boolean            @default(false)

  role               Role               @relation(fields: [roleId], references: [id])
  organization       Organization       @relation(fields: [organizationId], references: [id])
  donations          Donation[]
  subscriptions      Subscription[]
}


model Role {
  id                 Int                @id @default(autoincrement())
  name               String
  members            Member[]
}

model Donation {
  id                 Int                @id @default(autoincrement())
  memberId           String
  programId          Int
  amount             Int
  currency           String
  createdAt          DateTime           @default(now())

  member             Member             @relation(fields: [memberId], references: [id])
  program            Program            @relation(fields: [programId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELED
}

model Subscription {
  id                 Int                @id @default(autoincrement())
  memberId           String
  programId          Int           
  typeId             Int
  amount             Int
  currency           String
  status             SubscriptionStatus
  createdAt          DateTime           @default(now())
  canceledAt         DateTime?         
  
  member             Member             @relation(fields: [memberId], references: [id])
  type               SubscriptionType   @relation(fields: [typeId], references: [id])
  program            Program            @relation(fields: [programId], references: [id])
}

model SubscriptionType {
  id                 Int                @id @default(autoincrement())
  name               String

  subscriptions      Subscription[]
}